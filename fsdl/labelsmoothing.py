# AUTOGENERATED! DO NOT EDIT! File to edit: 02_NoisyMitigation_using_LabelSmoothing_MNIST.ipynb (unless otherwise specified).

__all__ = ['path', 'x', 'n', 'rng', 'noise_idxs', 'mnist', 'dls', 'learn', 'val_preds', 'val_ordered_label_errors']

# Cell
from fastai.vision.all import *
from numpy.random import default_rng
path = untar_data(URLs.MNIST)

# Cell
x = get_image_files(path)
n = len(x)
rng = default_rng(seed=42)

noise_idxs = rng.choice(n, size=round(n*0.1), replace=False)
len(noise_idxs),noise_idxs[:5]

# Cell
for i in range(0,len(noise_idxs)):
    old_path = str(x[noise_idxs[i]])

    if 'training' in old_path:
        new_path = str(x[noise_idxs[i]])[:49]+f'{np.random.randint(0,10)}'+str(x[noise_idxs[i]])[50:]
    elif 'testing' in old_path:
        new_path = str(x[noise_idxs[i]])[:48]+f'{np.random.randint(0,10)}'+str(x[noise_idxs[i]])[49:]

    os.system(f'mv {old_path} {new_path}')

# Cell
mnist = DataBlock(blocks=(ImageBlock(cls=PILImageBW), CategoryBlock),
                  get_items=get_image_files,
                  splitter=GrandparentSplitter(train_name='training', valid_name='testing'),
                  get_y=parent_label)
dls = mnist.dataloaders(path,bs=16)
dls.show_batch(max_n=36,figsize=(6,6))

# Cell
learn = cnn_learner(dls, resnet18, metrics=accuracy, loss_func=LabelSmoothingCrossEntropyFlat())

# Cell
learn.fine_tune(1, 1e-3)

# Cell
val_preds = learn.get_preds(ds_idx=1, with_decoded=True)

# Cell
from cleanlab.pruning import get_noise_indices

# Cell
val_ordered_label_errors = get_noise_indices(s=val_preds[1].numpy(), psx=val_preds[0].numpy(), sorted_index_method='normalized_margin')